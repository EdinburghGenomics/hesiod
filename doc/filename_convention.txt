Urmi compressed all the reads into a file named:

all_pass_reads.fastq.gz

I think we should continue our standard that every data file we deliver is uniquely
identifiable by name even if it is removed from the context of the directory.

To this end, I propose:

{run}_{lib}_{cellid}_{pf}

cellid is like PAD53013
pf is pass or fail

Much like Illumina. Not like PacBio.

---

OK, we have a problem with this. The cells in Nanopore can be washed out and reused. This
means that I get a new 'cell' which is actually a re-run of another 'cell', and this can happen
on the same run with the same input library, so:

$ ls 20190322_EGS1_11608GE0009_Megaruptor_test/11608GE0009L10_60kb
20190502_1735_2-E7-H7_PAD41040_5b5f10a2  20190502_1757_1-E3-H3_PAD41040_9c4d1f5e

To avoid making output files with the same names, I'm going to have to integrate the UID into the
final filename, so that makes it:

{run}_{lib}_{cellid}_{uid}_{pf}

The change is not too bad to make in terms of fixing the Snakefiles, but it does mean that all
the old runs can't be reprocessed with the new pipeline, or rather they need to be reprocessed
from scratch.

Or can I find a way around this?

I could make a script that renames the files. The YAML files will then be wrong, but we can just
delete them. OK, yes I think this might be doable.

I could detect that a run has been processed with the old pipeline and revert to the old names?
But this is extra cruft for code that was never even in production. Given that Urmi's request
for extra files has made breaking changes anyway, it seems silly.

Let's have a crack at that script.


#!/usr/bin/env python3

"""Check reading the metadata from a POD5 file"""

# The test file, PAK00002_fail_barcode07_b7f7032d_0.pod5.gz, is a combined POD5 file
# generated by pod5-convert-fast5 from the original FAST5. Once I have a native POD5
# file I should add this to the test suite.

import sys, os, re
import unittest
import logging
from collections import OrderedDict

DATA_DIR = os.path.abspath(os.path.dirname(__file__) + '/examples')
VERBOSE = os.environ.get('VERBOSE', '0') != '0'

from get_pod5_metadata import md_from_pod5_file

class T(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        #Prevent the logger from printing messages - I like my tests to look pretty.
        if VERBOSE:
            logging.getLogger().setLevel(logging.DEBUG)
        else:
            logging.getLogger().setLevel(logging.CRITICAL)

    def setUp(self):
        # See the errors in all their glory
        self.maxDiff = None

    ### THE TESTS ###

    # Expected failure because the POD5 library is returning the wrong version?
    # There is now an explanation from the authors on this issue thread, and a fix is
    # anticipated soon.
    # see https://github.com/nanoporetech/pod5-file-format/issues/11#issuecomment-1326676660

    def test_converted_pod5(self):
        """Try my test file. It's zipped, but the function will unzip it automatically.
        """
        md = md_from_pod5_file(DATA_DIR + '/PAK00002_fail_barcode07_b7f7032d_0.pod5.gz')

        # This is identical to the FAST5 aside from the file version tag.
        expected = dict( POD5Version       = '0.0.15',
                         StartTime         = 'Tuesday, 01 Mar 2022 15:38:47',
                         Software          = 'python-pod5-converter',
                         RunID             = 'b7f7032d28779ac6666af1b4fd724bf2ec41ec25',
                         SamplingFrequency = '4.0 kHz',
                         ExperimentType    = 'genomic_dna',
                         FlowcellId        = 'PAK00002',
                         FlowcellType      = 'FLO-PRO002',
                         SequencingKit     = 'sqk-lsk109',
                         Sample            = '14211AT0082',
                         BasecallConfig    = 'dna_r9.4.1_450bps_hac_prom.cfg' )

        self.assertEqual(dict(md), expected)

    def test_actual_pod5(self):

        md = md_from_pod5_file(DATA_DIR + '/PAS23464_fail_barcode11_c3f8b1dd_5ed8849a_0.pod5.gz')

        expected = dict( POD5Version = '0.2.7',
                         BasecallConfig = 'dna_r10.4.1_e8.2_400bps_5khz_sup.cfg',
                         ExperimentType = 'genomic_dna',
                         FlowcellId = 'PAS23464',
                         FlowcellType = 'FLO-PRO114M',
                         RunID = '5ed8849a0f6b8d388566af4955ce048a28f3fa09',
                         Sample = 'DoesThisWork',
                         SamplingFrequency = '5.0 kHz',
                         SequencingKit = 'sqk-nbd114-24',
                         Software = 'MinKNOW 23.11.7 (Bream 7.8.2, Core 5.8.6, Dorado 7.2.13+fba8e8925)',
                         StartTime = 'Thursday, 22 Feb 2024 15:52:33' )

        self.assertEqual(dict(md), expected)

if __name__ == '__main__':
    unittest.main()
